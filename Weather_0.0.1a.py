import discord
from discord.ext import commands
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
import logging
import os

# Logging configuration
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Get bot token
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
if not DISCORD_TOKEN:
    raise ValueError("No Discord token found in .env file.")

# Configure intents
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.message_content = True  # Required for command handling
bot = commands.Bot(command_prefix="!", intents=intents)

# Bot configuration
bot_config = {
    "weather_channel_id": None,
    "allowed_roles": [],
    "proximity": {"mountains": 0.7, "forests": 1.0, "river": 0.8},
    "forecast": [],
    "current_day": 0,
}

# Scheduler
scheduler = AsyncIOScheduler()

import random

def generate_weekly_forecast(proximity):
    """
    Generates a 7-day weather forecast based on proximity settings.
    Proximity contains the influence of mountains, forests, and rivers.
    """
    forecast = []
    for day in range(7):
        # Generate random weather conditions based on proximity values
        temperature = round(random.uniform(15, 30) - proximity["mountains"] * 5, 1)
        precipitation = random.choice(["none", "rain", "heavy rain", "snow"])
        wind_speed = round(random.uniform(5, 20) + proximity["mountains"] * 3, 1)
        cloud_cover = random.choice(["clear", "partly cloudy", "overcast"])
        humidity = round(random.uniform(40, 90) + proximity["forests"] * 10, 1)
        special_event = random.choice(
            [None, "river fog", "heatwave", "thunderstorm", "blizzard"]
            if proximity["river"] > 0.5
            else [None, "heatwave", "thunderstorm", "blizzard"]
        )

        forecast.append({
            "temperature": temperature,
            "precipitation": precipitation,
            "wind_speed": wind_speed,
            "cloud_cover": cloud_cover,
            "humidity": humidity,
            "special_event": special_event,
        })

    return forecast

def generate_forecast():
    """
    Generate a weekly forecast based on proximity modifiers in bot_config.
    """
    bot_config["forecast"] = generate_weekly_forecast(bot_config["proximity"])
    bot_config["current_day"] = 0  # Reset to the first day
    logger.info("New weekly forecast has been generated.")

@bot.command(name="generateforecast")
@commands.has_permissions(administrator=True)
async def generate_weekly_forecast(ctx):
    """
    Admin command to generate a new weekly forecast.
    Usage: !generateforecast
    """
    generate_forecast()
    await ctx.send("A new weekly forecast has been generated!")
    logger.info(f"Weekly forecast generated by {ctx.author}.")

@bot.command(name="resetforecast")
@commands.has_permissions(administrator=True)
async def reset_weekly_forecast(ctx):
    """
    Admin command to reset the weekly forecast.
    Usage: !resetforecast
    """
    bot_config["forecast"] = []
    bot_config["current_day"] = 0
    await ctx.send("The weekly forecast has been reset. Use `!generateforecast` to create a new one.")
    logger.info(f"Weekly forecast reset by {ctx.author}.")

@bot.command(name="setforecastroles")
@commands.has_permissions(administrator=True)
async def set_forecast_roles(ctx, *roles: discord.Role):
    """
    Admin command to set roles that can query the weekly forecast.
    Usage: !setforecastroles @Role1 @Role2
    """
    if not roles:
        await ctx.send("Please mention at least one role to allow access.")
        return

    bot_config["allowed_roles"] = [role.id for role in roles]
    role_names = ", ".join([role.name for role in roles])
    
    await ctx.send(f"Roles allowed to query the forecast: {role_names}")
    logger.info(f"Forecast roles updated by {ctx.author}: {role_names}")

@bot.command(name="forecast")
async def get_weekly_forecast(ctx):
    """
    Command to display the full weekly forecast, restricted to specific roles.
    Usage: !forecast
    """
    allowed_roles = bot_config.get("allowed_roles", [])
    user_roles = [role.id for role in ctx.author.roles]

    if not any(role in allowed_roles for role in user_roles):
        await ctx.send("You don't have permission to view the weekly forecast.")
        logger.warning(f"{ctx.author} attempted to access the forecast without proper roles.")
        return

    forecast = bot_config["forecast"]
    if not forecast:
        await ctx.send("No forecast data available. Please ask an admin to generate it.")
        logger.warning(f"Forecast requested by {ctx.author}, but no forecast data is available.")
        return

    forecast_message = "**Weekly Weather Forecast for Kyonin** üåç\n"
    for day_index, weather in enumerate(forecast):
        forecast_message += (
            f"\nDay {day_index + 1}: Temp: {weather['temperature']}¬∞C, "
            f"Precip: {weather['precipitation']}, Wind: {weather['wind_speed']} km/h"
        )

    await ctx.send(forecast_message)

@bot.command(name="weather_help")
async def weather_help(ctx):
    """
    Custom help command that lists all bot commands, including admin commands.
    """
    help_message = (
        "**Kyonin Weather Bot Commands** üå¶Ô∏è\n\n"
        "üìå **Admin Commands:**\n"
        "- `!setweatherchannel <#channel>`: Set the channel for daily weather updates.\n"
        "- `!setproximity <mountains> <forests> <river>`: Set proximity values (0 to 1) for terrain features.\n"
        "- `!setforecastroles <@Role1> <@Role2>`: Set roles that can query the forecast.\n"
        "- `!generateforecast`: Generate a new weekly forecast.\n"
        "- `!resetforecast`: Clear the current forecast data.\n\n"
        "üìå **User Commands:**\n"
        "- `!forecast`: View the weekly weather forecast (requires an allowed role).\n"
        "- `!ping`: Check if the bot is online.\n\n"
        "üìå **Other Information:**\n"
        "- Daily weather updates are posted automatically in the designated channel."
    )
    await ctx.send(help_message)

@scheduler.scheduled_job("cron", hour=0, minute=0)
async def daily_weather_task():
    """
    Scheduled task to post daily weather at midnight.
    """
    channel_id = bot_config["weather_channel_id"]
    if not channel_id:
        return

    channel = bot.get_channel(channel_id)
    if not channel:
        return

    current_day = bot_config["current_day"]
    forecast = bot_config["forecast"]

    if current_day >= len(forecast):
        return

    weather = forecast[current_day]
    await channel.send(
        f"Today's Weather: {weather['temperature']}¬∞C, {weather['precipitation']}, {weather['wind_speed']} km/h"
    )
    bot_config["current_day"] += 1

@bot.event
async def on_ready():
    logger.info(f"Logged in as {bot.user.name} (ID: {bot.user.id})")
    scheduler.start()
    logger.info("Scheduler started.")

bot.run(DISCORD_TOKEN)
